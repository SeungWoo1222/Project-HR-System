<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woosan.hr_system.salary.dao.SalaryDAO">
    <resultMap id="SalaryResultMap" type="com.woosan.hr_system.salary.model.Salary">
        <id property="salaryId" column="salary_id" />
        <result property="employeeId" column="employee_id" />
        <result property="name" column="name" />
        <result property="department" column="department_id" javaType="com.woosan.hr_system.employee.model.Department" typeHandler="com.woosan.hr_system.employee.model.DepartmentTypeHandler"/>
        <result property="position" column="position_id" javaType="com.woosan.hr_system.employee.model.Position" typeHandler="com.woosan.hr_system.employee.model.PositionTypeHandler"/>
        <result property="bank" column="bank" />
        <result property="accountNumber" column="account_number" />
        <result property="annualSalary" column="annual_salary" />
        <result property="status" column="status" />
        <result property="createdAt" column="created_at" />
    </resultMap>

    <resultMap id="EmployeeResultMap" type="com.woosan.hr_system.employee.model.Employee">
        <id property="employeeId" column="employee_id"/>
        <result property="name" column="name"/>
        <result property="department" column="department_id" javaType="com.woosan.hr_system.employee.model.Department" typeHandler="com.woosan.hr_system.employee.model.DepartmentTypeHandler"/>
        <result property="position" column="position_id" javaType="com.woosan.hr_system.employee.model.Position" typeHandler="com.woosan.hr_system.employee.model.PositionTypeHandler"/>
    </resultMap>

    <!-- 급여 ID를 이용한 특정 사원의 급여 정보 조회 -->
    <select id="selectSalaryById" parameterType="int" resultMap="SalaryResultMap">
        SELECT * FROM salaries WHERE salary_id = #{salaryId}
    </select>

    <!-- 사원 ID를 이용한 특정 사원의 급여 정보 조회 -->
    <select id="selectSalaryByEmployeeId" parameterType="String" resultMap="SalaryResultMap">
        SELECT * FROM salaries WHERE employee_id = #{employeeId} AND status = 1
    </select>

    <!-- 사원 ID 리스트를 이용한 사원들의 급여 정보 조회 -->
    <select id="selectSalariesByIds" parameterType="List" resultMap="SalaryResultMap">
        SELECT * FROM salaries WHERE salary_id IN
        <foreach item="salaryId" index="index" collection="list" open="(" separator="," close=")">
            #{salaryId}
        </foreach>
    </select>

    <!-- 사원 ID를 이용한 특정 사원의 모든 급여 ID 조회 -->
    <select id="selectSalaryIdList" parameterType="String" resultType="int">
        SELECT salary_id FROM salaries WHERE employee_id = #{employeeId}
    </select>

    <!-- 급여 정보가 없는 사원 리스트 조회 -->
    <select id="selectEmployeeList" resultMap="EmployeeResultMap">
        SELECT e.employee_id, e.name, e.department_id, e.position_id
        FROM employees e
                 LEFT JOIN salaries s ON e.employee_id = s.employee_id
        WHERE s.employee_id IS NULL;
    </select>

    <!-- 모든 급여정보 - 검색어와 부서에 해당하는 데이터 결과 조회 -->
    <select id="searchSalaries" parameterType="map" resultMap="SalaryResultMap">
        SELECT *
        FROM salaries
        <where>
            <if test="keyword != null and keyword != ''">
                (
                salary_id LIKE CONCAT('%', #{keyword}, '%') OR
                employee_id LIKE CONCAT('%', #{keyword}, '%') OR
                name LIKE CONCAT('%', #{keyword}, '%') OR
                department_id LIKE CONCAT('%', #{keyword}, '%') OR
                position_id LIKE CONCAT('%', #{keyword}, '%') OR
                bank LIKE CONCAT('%', #{keyword}, '%') OR
                account_number LIKE CONCAT('%', #{keyword}, '%') OR
                annual_salary LIKE CONCAT('%', #{keyword}, '%') OR
                status LIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="department != null and department != ''">
                AND department_id = #{department}
            </if>
        </where>
        ORDER BY salary_id DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- 모든 급여정보 - 검색어와 부서에 해당하는 전체 데이터 개수 조회 -->
    <select id="countSalaries" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM salaries
        <where>
            <if test="keyword != null and keyword != ''">
                (
                salary_id LIKE CONCAT('%', #{keyword}, '%') OR
                employee_id LIKE CONCAT('%', #{keyword}, '%') OR
                name LIKE CONCAT('%', #{keyword}, '%') OR
                department_id LIKE CONCAT('%', #{keyword}, '%') OR
                position_id LIKE CONCAT('%', #{keyword}, '%') OR
                bank LIKE CONCAT('%', #{keyword}, '%') OR
                account_number LIKE CONCAT('%', #{keyword}, '%') OR
                annual_salary LIKE CONCAT('%', #{keyword}, '%') OR
                status LIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="department != null and department != ''">
                AND department_id = #{department}
            </if>
        </where>
    </select>

    <!-- 급여 지급 조회를 위한 현재 사용하는 급여정보 - 검색어와 부서에 해당하는 데이터 결과 조회 -->
    <select id="searchUsingSalaries" parameterType="map" resultMap="SalaryResultMap">
        SELECT *
        FROM salaries
        <where>
            <if test="keyword != null and keyword != ''">
                (
                salary_id LIKE CONCAT('%', #{keyword}, '%') OR
                employee_id LIKE CONCAT('%', #{keyword}, '%') OR
                name LIKE CONCAT('%', #{keyword}, '%') OR
                department_id LIKE CONCAT('%', #{keyword}, '%') OR
                position_id LIKE CONCAT('%', #{keyword}, '%') OR
                bank LIKE CONCAT('%', #{keyword}, '%') OR
                account_number LIKE CONCAT('%', #{keyword}, '%') OR
                annual_salary LIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="department != null and department != ''">
                AND department_id = #{department}
            </if>
            AND status = #{status}
            <if test="yearMonth != null">
                AND DATE_FORMAT(created_at, '%Y-%m') &lt;= #{yearMonth}
            </if>
        </where>
        ORDER BY salary_id DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- 급여 지급 조회를 위한 현재 사용하는 급여정보 - 검색어와 부서에 해당하는 전체 데이터 개수 조회 -->
    <select id="countUsingSalaries" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM salaries
        <where>
            <if test="keyword != null and keyword != ''">
                (
                salary_id LIKE CONCAT('%', #{keyword}, '%') OR
                employee_id LIKE CONCAT('%', #{keyword}, '%') OR
                name LIKE CONCAT('%', #{keyword}, '%') OR
                department_id LIKE CONCAT('%', #{keyword}, '%') OR
                position_id LIKE CONCAT('%', #{keyword}, '%') OR
                bank LIKE CONCAT('%', #{keyword}, '%') OR
                account_number LIKE CONCAT('%', #{keyword}, '%') OR
                annual_salary LIKE CONCAT('%', #{keyword}, '%') OR
                status LIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="department != null and department != ''">
                AND department_id = #{department}
            </if>
            AND status = #{status}
            <if test="yearMonth != null">
                AND DATE_FORMAT(created_at, '%Y-%m') &lt;= #{yearMonth}
            </if>
        </where>
    </select>

    <!-- 모든 사원의 급여 정보 조회 -->
    <select id="selectUsingSalaryIdList" resultType="int">
        SELECT salary_id FROM salaries WHERE status = 1;
    </select>

    <!-- 모든 사원의 급여 정보 조회 -->
    <select id="selectAllSalaries" resultMap="SalaryResultMap">
        SELECT * FROM salaries
    </select>

    <!-- 사원 급여 정보 등록 -->
    <insert id="insertSalary" parameterType="com.woosan.hr_system.salary.model.Salary" useGeneratedKeys="true" keyProperty="salaryId">
        INSERT INTO salaries (employee_id, name, annual_salary, bank, account_number, department_id, position_id)
        VALUES (#{employeeId}, #{name}, #{annualSalary}, #{bank}, #{accountNumber}, #{department}, #{position})
    </insert>

    <!-- 사원 급여 정보 수정 -->
    <update id="updateSalary" parameterType="com.woosan.hr_system.salary.model.Salary">
        UPDATE salaries SET
                            employee_id = #{employeeId},
                            name = #{name},
                            annual_salary = #{annualSalary},
                            bank = #{bank},
                            account_number = #{accountNumber},
                            department_id = #{department},
                            position_id = #{position},
                            status = #{status}
        WHERE salary_id = #{salaryId}
    </update>

    <!-- 사원 급여 정보 삭제 -->
    <delete id="deleteSalary" parameterType="int">
        DELETE FROM salaries WHERE salary_id = #{salaryId}
    </delete>

</mapper>
